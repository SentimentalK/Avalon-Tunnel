#!/bin/bash

#=================================================================================
# Avalon Tunnel - ÁéØÂ¢ÉÈ¢ÑÊ£ÄÊü•ËÑöÊú¨
# Âú® docker compose up ‰πãÂâçËøêË°åÔºåÁ°Æ‰øùÂü∫Á°ÄÁéØÂ¢ÉÊª°Ë∂≥Ë¶ÅÊ±Ç
#=================================================================================

# --- ÈÖçÁΩÆ ---
if [ -f .env ]; then
  export $(grep -v '^#' .env | xargs)
fi
DOMAIN=${DOMAIN:-"your-domain.com"}

# --- È¢úËâ≤ÂÆö‰πâ ---
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[1;34m'
NC='\033[0m'

# --- ËæÖÂä©ÂáΩÊï∞ ---
print_info() { echo -e "${YELLOW}INFO: $1${NC}"; }
print_success() { echo -e "${GREEN}‚úÖ PASS:${NC} $1"; }
print_fail() { echo -e "${RED}‚ùå FAIL:${NC} $1"; FAIL_COUNT=$((FAIL_COUNT + 1)); }
print_warning() { echo -e "${YELLOW}‚ö†Ô∏è  WARN:${NC} $1"; }

check_command() {
  if ! command -v $1 &> /dev/null; then
    print_fail "ÂøÖÈúÄÂëΩ‰ª§ '$1' Êú™ÊâæÂà∞„ÄÇËØ∑ÂÖàÂÆâË£Ö: sudo apt install -y $2"
    exit 1
  fi
}

# Ê£ÄÊµã IP ÊòØÂê¶‰∏∫ IPv6
is_ipv6() {
  [[ "$1" =~ : ]]
}

# --- ÂàùÂßãÂåñ ---
FAIL_COUNT=0
clear
echo "=============================================="
echo "    üîç Avalon Tunnel ÁéØÂ¢ÉÈ¢ÑÊ£ÄÊü•"
echo "=============================================="
echo "ÂüüÂêç: $DOMAIN"
echo ""

# --- Èò∂ÊÆµ 1: ÊùÉÈôê‰∏éÂëΩ‰ª§Ê£ÄÊü• ---
echo "--- Èò∂ÊÆµ 1: ÊùÉÈôê‰∏éÂëΩ‰ª§Ê£ÄÊü• ---"
if [ "$EUID" -ne 0 ]; then
  print_fail "Ê≠§ËÑöÊú¨ÈúÄË¶Å root ÊùÉÈôê (sudo)„ÄÇ"
  exit 1
else
  print_success "‰ª• root ÊùÉÈôêËøêË°å„ÄÇ"
fi

check_command "docker" "docker.io"
check_command "dig" "dnsutils"
check_command "nc" "netcat-traditional"
check_command "curl" "curl"
check_command "python3" "python3"
echo ""

# --- Èò∂ÊÆµ 2: ÁΩëÁªúËøûÈÄöÊÄß ---
echo "--- Èò∂ÊÆµ 2: ÁΩëÁªúËøûÈÄöÊÄß ---"

# Ëé∑ÂèñÂÖ¨ÁΩë IPÔºàÊîØÊåÅ IPv6Ôºâ
PUBLIC_IP=$(curl -6 -s --max-time 5 https://api6.ipify.org 2>/dev/null)
if [ -z "$PUBLIC_IP" ]; then
  PUBLIC_IP=$(curl -4 -s --max-time 5 https://api.ipify.org 2>/dev/null)
fi

if [ -z "$PUBLIC_IP" ]; then
  print_fail "Êó†Ê≥ïËé∑ÂèñÊúçÂä°Âô®ÁöÑÂÖ¨ÁΩë IP Âú∞ÂùÄ„ÄÇËØ∑Ê£ÄÊü•ÁΩëÁªúËøûÊé•„ÄÇ"
else
  if is_ipv6 "$PUBLIC_IP"; then
    print_success "Ëé∑ÂèñÂà∞ÂÖ¨ÁΩë IPv6: $PUBLIC_IP"
  else
    print_success "Ëé∑ÂèñÂà∞ÂÖ¨ÁΩë IPv4: $PUBLIC_IP"
  fi
fi

# ÂüüÂêçËß£ÊûêÔºàÊîØÊåÅ IPv6Ôºâ
DOMAIN_IP=$(dig +short $DOMAIN AAAA | head -n 1)
if [ -z "$DOMAIN_IP" ]; then
  DOMAIN_IP=$(dig +short $DOMAIN A | head -n 1)
fi

if [ -z "$DOMAIN_IP" ]; then
  print_fail "Êó†Ê≥ïËß£ÊûêÂüüÂêç '$DOMAIN'„ÄÇËØ∑Ê£ÄÊü• DNS ÈÖçÁΩÆ„ÄÇ"
else
  if is_ipv6 "$DOMAIN_IP"; then
    print_success "ÂüüÂêç '$DOMAIN' Ëß£ÊûêÂà∞ IPv6: $DOMAIN_IP"
  else
    print_success "ÂüüÂêç '$DOMAIN' Ëß£ÊûêÂà∞ IPv4: $DOMAIN_IP"
  fi
  
  # Ê£ÄÊü• IP ÊòØÂê¶ÂåπÈÖçÔºà‰ªÖÊèêÁ§∫Ôºå‰∏çÂº∫Âà∂Ôºâ
  if [ "$PUBLIC_IP" == "$DOMAIN_IP" ]; then
    print_success "ÂüüÂêç IP ‰∏éÊú¨Êú∫ÂÖ¨ÁΩë IP ÂÆåÂÖ®ÂåπÈÖç„ÄÇ"
  else
    print_warning "ÂüüÂêç IP ($DOMAIN_IP) ‰∏éÊú¨Êú∫ÂÖ¨ÁΩë IP ($PUBLIC_IP) ‰∏çÂêå„ÄÇ"
    print_info "Â¶ÇÊûú‰Ω†‰ΩøÁî® CDN Êàñ‰ª£ÁêÜÔºåËøôÊòØÊ≠£Â∏∏ÁöÑ„ÄÇÂê¶ÂàôËØ∑Ê£ÄÊü• DNS ÈÖçÁΩÆ„ÄÇ"
  fi
fi

# ÊµãËØïÂ§ñÁΩëËøûÈÄöÊÄßÔºà‰ºòÂÖà IPv6Ôºâ
if curl -6 -s --max-time 5 https://www.google.com > /dev/null 2>&1; then
  print_success "ÂèØ‰ª•ÈÄöËøá IPv6 ËÆøÈóÆÂ§ñÈÉ®ÁΩëÁªú„ÄÇ"
elif curl -4 -s --max-time 5 https://www.google.com > /dev/null 2>&1; then
  print_success "ÂèØ‰ª•ÈÄöËøá IPv4 ËÆøÈóÆÂ§ñÈÉ®ÁΩëÁªú„ÄÇ"
else
  print_fail "Êó†Ê≥ïËÆøÈóÆÂ§ñÈÉ®ÁΩëÁªú„ÄÇËØ∑Ê£ÄÊü•Ë∑ØÁî±Âíå DNS ÈÖçÁΩÆ„ÄÇ"
fi
echo ""

# --- Èò∂ÊÆµ 3: Èò≤ÁÅ´Â¢ôÊ£ÄÊü• ---
echo "--- Èò∂ÊÆµ 3: Êú¨Âú∞Èò≤ÁÅ´Â¢ô (UFW) Ê£ÄÊü• ---"

if ! command -v ufw &> /dev/null; then
  print_warning "Êú™Ê£ÄÊµãÂà∞ UFW„ÄÇÂ¶ÇÊûú‰Ω†Âú®‰ΩøÁî®ÂÖ∂‰ªñÈò≤ÁÅ´Â¢ôÔºåËØ∑ÊâãÂä®Á°ÆËÆ§Â∑≤ÂºÄÊîæ 22/80/443 Á´ØÂè£„ÄÇ"
else
  if ufw status | grep -qw active; then
    print_info "UFW Èò≤ÁÅ´Â¢ôÂ§Ñ‰∫éÊ¥ªÂä®Áä∂ÊÄÅ„ÄÇ"
    
    # Ê£ÄÊü•Á´ØÂè£ 443
    if ufw status | grep -E "443.*ALLOW" > /dev/null; then
      print_success "UFW Â∑≤ÂÖÅËÆ∏ 443/tcp Á´ØÂè£„ÄÇ"
    else
      print_fail "UFW Êú™ÂÖÅËÆ∏ 443/tcp Á´ØÂè£„ÄÇÈò≤ÁÅ´Â¢ôËÑöÊú¨ÂèØËÉΩÊú™Ê≠£Á°ÆÊâßË°å„ÄÇ"
    fi
    
    # Ê£ÄÊü•Á´ØÂè£ 80ÔºàÁî®‰∫é TLS ËØÅ‰π¶Áî≥ËØ∑Ôºâ
    if ufw status | grep -E "80.*ALLOW" > /dev/null; then
      print_success "UFW Â∑≤ÂÖÅËÆ∏ 80/tcp Á´ØÂè£„ÄÇ"
    else
      print_warning "UFW Êú™ÂÖÅËÆ∏ 80/tcp Á´ØÂè£„ÄÇCaddy Ëá™Âä®Áî≥ËØ∑ËØÅ‰π¶ÂèØËÉΩÂ§±Ë¥•„ÄÇ"
    fi
  else
    print_warning "UFW Èò≤ÁÅ´Â¢ôÊú™ÊøÄÊ¥ª„ÄÇËØ∑Á°Æ‰øù‰∫ëÊúçÂä°ÂïÜÂÆâÂÖ®ÁªÑÂ∑≤Ê≠£Á°ÆÈÖçÁΩÆ„ÄÇ"
  fi
fi
echo ""

# --- Èò∂ÊÆµ 4: Oracle Cloud VCN ÂÆâÂÖ®ÁªÑÊ£ÄÊü• ---
echo "--- Èò∂ÊÆµ 4: Oracle Cloud VCN ÂÆâÂÖ®ÁªÑÊ£ÄÊü• ---"
print_info "Oracle Cloud ‰ΩøÁî®ÂèåÂ±ÇÈò≤ÁÅ´Â¢ôÔºöUFWÔºà‰∏ªÊú∫Á∫ßÔºâ+ VCN Security ListÔºàÁΩëÁªúÁ∫ßÔºâ"
print_info "Âç≥‰Ωø UFW ÂºÄÊîæ‰∫ÜÁ´ØÂè£ÔºåVCN Security List ‰πüÂøÖÈ°ªÂÖÅËÆ∏ÂÖ•Á´ôÊµÅÈáèÔºÅ"
echo ""
echo -e "${BLUE}ËØ∑ÊâãÂä®Ê£ÄÊü•‰ª•‰∏ãÈÖçÁΩÆÔºö${NC}"
echo "1. ÁôªÂΩï Oracle Cloud Console"
echo "2. ËøõÂÖ•ÔºöNetworking -> Virtual Cloud Networks -> ‰Ω†ÁöÑ VCN"
echo "3. ÁÇπÂáªÔºöSecurity Lists -> Default Security List"
echo "4. Ê£ÄÊü• Ingress Rules ÊòØÂê¶ÂåÖÂê´Ôºö"
echo "   - Source: 0.0.0.0/0ÔºåDest Port: 443ÔºåProtocol: TCP"
echo "   - Source: 0.0.0.0/0ÔºåDest Port: 80ÔºåProtocol: TCP"
echo "   - Source: ::/0ÔºåDest Port: 443ÔºåProtocol: TCPÔºàÂ¶ÇÊûú‰ΩøÁî® IPv6Ôºâ"
echo "   - Source: ::/0ÔºåDest Port: 80ÔºåProtocol: TCPÔºàÂ¶ÇÊûú‰ΩøÁî® IPv6Ôºâ"
echo ""
print_warning "Â¶ÇÊûúÊ≤°ÊúâËøô‰∫õËßÑÂàôÔºåËØ∑Âú® Oracle Cloud Console ‰∏≠Ê∑ªÂä†ÔºÅ"
echo ""

# --- Èò∂ÊÆµ 5: Docker Ê£ÄÊü• ---
echo "--- Èò∂ÊÆµ 5: Docker ÊúçÂä°Ê£ÄÊü• ---"
if ! docker info &> /dev/null; then
  print_fail "Docker ÂÆàÊä§ËøõÁ®ãÊú™ËøêË°åÊàñÂΩìÂâçÁî®Êà∑Êó†ÊùÉÈôêËÆøÈóÆ„ÄÇ"
  exit 1
else
  print_success "Docker ÊúçÂä°ËøêË°åÊ≠£Â∏∏„ÄÇ"
fi

# Ê£ÄÊü• Docker ÁΩëÁªú
if docker network ls | grep -q bridge; then
  print_success "Docker ÈªòËÆ§ÁΩëÁªúÈÖçÁΩÆÊ≠£Â∏∏„ÄÇ"
fi
echo ""

# --- ÊÄªÁªì ---
echo "=============================================="
echo "            üìä È¢ÑÊ£ÄÊü•ÂÆåÊàê"
echo "=============================================="
if [ "$FAIL_COUNT" -eq 0 ]; then
  echo -e "${GREEN}‚úÖ ÊâÄÊúâÈ¢ÑÊ£ÄÊü•È°πÁõÆÂùáÈÄöËøáÔºÅÂèØ‰ª•ÂêØÂä®ÊúçÂä°„ÄÇ${NC}"
else
  echo -e "${RED}ÂèëÁé∞ ${FAIL_COUNT} ‰∏™ÈóÆÈ¢ò„ÄÇËØ∑‰øÆÂ§çÂêéÂÜçÂêØÂä®ÊúçÂä°„ÄÇ${NC}"
fi
echo "=============================================="

exit $FAIL_COUNT

# --- Ê£ÄÊü• DNS64 ÈÖçÁΩÆ ---
echo "--- DNS64/NAT64 ÈÖçÁΩÆÊ£ÄÊü•ÔºàIPv6-only ÁéØÂ¢ÉÂøÖÈúÄÔºâ---"
if is_ipv6 "$PUBLIC_IP"; then
  print_info "Ê£ÄÊµãÂà∞ IPv6-only ÁéØÂ¢ÉÔºåÊ£ÄÊü• DNS64 ÈÖçÁΩÆ..."
  
  # Ê£ÄÊü• DNS64 ÈÖçÁΩÆ
  if grep -r "2606:4700:4700::64\|2001:4860:4860::6464\|2a01:4f9:c010:3f02::1" /etc/systemd/resolved.conf* 2>/dev/null; then
    print_success "Â∑≤ÈÖçÁΩÆ DNS64 ÊúçÂä°„ÄÇ"
  else
    print_warning "Êú™Ê£ÄÊµãÂà∞ DNS64 ÈÖçÁΩÆ„ÄÇ"
    print_info "IPv6-only ÊúçÂä°Âô®ÈúÄË¶Å DNS64 ÊâçËÉΩËÆøÈóÆ IPv4-only ÁΩëÁ´ôÔºàÂ¶Ç GitHubÔºâ„ÄÇ"
    print_info "ËøêË°å 'make setup' Ëá™Âä®ÈÖçÁΩÆ„ÄÇ"
  fi
  
  # ÊµãËØïËÉΩÂê¶ËÆøÈóÆ IPv4-only ÁΩëÁ´ô
  print_info "ÊµãËØïËÆøÈóÆ IPv4-only ÁΩëÁ´ôÔºàgithub.comÔºâ..."
  if curl -6 -s --max-time 5 https://github.com > /dev/null 2>&1; then
    print_success "ÂèØ‰ª•ËÆøÈóÆ IPv4-only ÁΩëÁ´ô„ÄÇNAT64/DNS64 Â∑•‰ΩúÊ≠£Â∏∏„ÄÇ"
  else
    print_fail "Êó†Ê≥ïËÆøÈóÆ IPv4-only ÁΩëÁ´ôÔºÅ"
    print_info "ËøôÊÑèÂë≥ÁùÄ‰Ω†ÁöÑ‰ª£ÁêÜÂÆ¢Êà∑Á´ØÂ∞ÜÊó†Ê≥ïËÆøÈóÆÂ§ßÈáèÁΩëÁ´ôÔºàÁ∫¶ 57%Ôºâ„ÄÇ"
    print_info "ËØ∑ÈÖçÁΩÆ DNS64/NAT64 ÊúçÂä°„ÄÇ"
  fi
fi
echo ""

# --- Èò∂ÊÆµ 6: Á≥ªÁªüÁΩëÁªú‰ºòÂåñ ---
echo "--- Èò∂ÊÆµ 6: Á≥ªÁªüÁΩëÁªú‰ºòÂåñ ---"

# Ê£ÄÊü• UDP buffer sizeÔºàCaddy QUIC/HTTP3 ÈúÄË¶ÅÔºâ
print_info "Ê£ÄÊü• UDP receive buffer size..."
CURRENT_RMEM=$(sysctl -n net.core.rmem_max 2>/dev/null || echo "0")
REQUIRED_RMEM=7340032  # 7 MB

if [ "$CURRENT_RMEM" -lt "$REQUIRED_RMEM" ]; then
  print_warning "UDP buffer size ËøáÂ∞è (ÂΩìÂâç: $((CURRENT_RMEM / 1024)) KB, Êé®Ëçê: $((REQUIRED_RMEM / 1024)) KB)"
  print_info "Ëøô‰ºöÂØºËá¥ Caddy Ë≠¶Âëä: 'failed to sufficiently increase receive buffer size'"
  print_info "Ê≠£Âú®‰ºòÂåñ..."
  
  # ‰∏¥Êó∂ËÆæÁΩÆ
  sysctl -w net.core.rmem_max=$REQUIRED_RMEM > /dev/null 2>&1
  sysctl -w net.core.wmem_max=$REQUIRED_RMEM > /dev/null 2>&1
  
  # Ê∞∏‰πÖËÆæÁΩÆ
  if ! grep -q "net.core.rmem_max" /etc/sysctl.conf 2>/dev/null; then
    echo "# Avalon Tunnel - UDP buffer optimization for QUIC" >> /etc/sysctl.conf
    echo "net.core.rmem_max = $REQUIRED_RMEM" >> /etc/sysctl.conf
    echo "net.core.wmem_max = $REQUIRED_RMEM" >> /etc/sysctl.conf
    sysctl -p > /dev/null 2>&1
  fi
  
  print_success "UDP buffer size Â∑≤‰ºòÂåñ‰∏∫ $((REQUIRED_RMEM / 1024)) KB"
else
  print_success "UDP buffer size Â∑≤Êª°Ë∂≥Ë¶ÅÊ±Ç ($((CURRENT_RMEM / 1024)) KB)"
fi
echo ""
